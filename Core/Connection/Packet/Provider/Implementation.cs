using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Xintric.DataRouter.Core.Connection.Packet.Provider
{
    public class Implementation : IProvider
    {

        public Implementation(bool generateautomaticfactories = true)
        {
            if (generateautomaticfactories) GenerateAutomaticFactories();
        }

        Dictionary<string, IFactory> factories = new Dictionary<string, IFactory>();

        public IEnumerable<IFactory> Factories
        {
            get
            {
                return factories.Select(x => x.Value);
            }
        }

        public void RegisterFactory(IFactory factory)
        {
            factories[factory.Name] = factory;
        }

        public IPacket Create(string type, byte[] data)
        {
            return factories[type].Create(data);
        }

        bool generateonlyonce = true;
        public void GenerateAutomaticFactories()
        {
            if (!generateonlyonce) return;
            generateonlyonce = false;
            foreach (var type in AppDomain.CurrentDomain.GetAssemblies().SelectMany(asm => asm.GetTypes()).Where(x =>
            x.GetInterfaces().Contains(typeof(Xintric.DataRouter.Core.Connection.IPacket))
            && !x.IsInterface
            && !x.IsAbstract
            && x.GetCustomAttributes(typeof(Xintric.DataRouter.Core.Connection.Packet.AutoGenerateFactoryAttribute), true).Length > 0
            ))
            {
                var method = type.GetMethod("FromByteArray");
                if (method == null) continue; //TODO: Remove this, expect all packets to have a FromByteArray!
                if ((method.Attributes & MethodAttributes.Static) != MethodAttributes.Static) throw new InvalidCastException("The method FromByteArray must be declared static");

                RegisterFactory(new AutoGeneratedFactory(type, data =>
                {
                    return (Xintric.DataRouter.Core.Connection.IPacket)method.Invoke(null, new object[] { data });
                }));

            }
        }


        public string GetNameOf(IPacket packet)
        {
            return Factories.First(x => x.IsMine(packet)).Name;
        }


        class AutoGeneratedFactory : IFactory
        {
            public AutoGeneratedFactory(Type type, Func<byte[], IPacket> func)
            {
                PacketType = type;
                FromByteArray = func;
            }
            public Func<byte[], IPacket> FromByteArray { get; private set; }

            public Type PacketType { get; private set; }
            public string Name { get { return PacketType.FullName; } }

            public IPacket Create(byte[] data)
            {
                return FromByteArray(data);
            }

            public bool IsMine(IPacket packet)
            {
                return packet.GetType() == PacketType;
            }
        }


    }
}
